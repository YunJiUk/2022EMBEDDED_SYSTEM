#include <iostream>
#include <sstream>
#include <opencv2/imgcodecs.hpp>
#include <opencv2/imgproc.hpp>
#include <opencv2/videoio.hpp>
#include <opencv2/highgui.hpp>
#include <opencv2/video.hpp>

using namespace cv;
using namespace std;




int main()
{
    VideoCapture cap(0); 	// 웹캠인 경우
    VideoCapture cap2("pikachu.gif");	// 동영상 파일인 경우
    if (!cap.isOpened()) { cout << "동영상을 열 수 없음\n"; return -1; }
    if (!cap2.isOpened()) { cout << "동영상2를 열 수 없음\n"; return -1; }

    

    namedWindow("frame", 1);	// 윈도우 생성
    while (1) {
        
        Mat frame;
        Mat frame2;
        Mat A;
        Mat A_gray = cv::imread("pocketmon.jpg", IMREAD_GRAYSCALE);
        Mat B;
        Mat C;

        cap >> frame;	// 동영상에서 하나의 프레임을 추출한다.
        cap2 >> frame2;
        if (cap2.get(CAP_PROP_POS_FRAMES) == cap2.get(CAP_PROP_FRAME_COUNT)) {
            cap2.open("pikachu.gif");
        }
        Mat D(frame, Rect(0, 0, frame2.cols, frame2.rows));
        
        frame2.copyTo(D);

        imshow("frame", frame);
        
        
        if (waitKey(30) >= 0) break;
    }
    return 0;
}


#include "/home/jiuk/opencv2/opencv.hpp"


using namespace cv;

int main(int, char**)
{
    VideoCapture cap(0); // open the default camera
    if(!cap.isOpened())  // check if we succeeded
        return -1;

    Mat edges;
    namedWindow("edges",1);
    for(;;)
    {
        Mat frame;
        cap >> frame; // get a new frame from camera
        cvtColor(frame, edges, COLOR_BGR2GRAY);
        GaussianBlur(edges, edges, Size(7,7), 1.5, 1.5);
        Canny(edges, edges, 0, 30, 3);
        imshow("edges", edges);
        if(waitKey(30) >= 0) break;
    }
    // the camera will be deinitialized automatically in VideoCapture destructor
    return 0;
}
